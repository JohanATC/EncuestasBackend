package com.pruebas.pruebas.resource;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pruebas.pruebas.dto.EncuestaDTO;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
class EncuestaResourceTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    // ‚úÖ TEST 1: Caracteres espa√±oles (CASO M√ÅS COM√öN)
    @Test
    void testCaracteresEspanoles() throws Exception {
        EncuestaDTO encuesta = new EncuestaDTO();
        encuesta.setTitulo("Encuesta: Satisfacci√≥n del cliente en el restaurante");
        encuesta.setDescripcion("¬øC√≥mo calificar√≠as tu experiencia? ¬°D√©janos tu opini√≥n sobre el servicio, comida y atenci√≥n!");
        encuesta.setEstado("ACTIVA");

        mockMvc.perform(post("/api/encuestas")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(encuesta)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.titulo").value("Encuesta: Satisfacci√≥n del cliente en el restaurante"))
                .andExpect(jsonPath("$.descripcion").value("¬øC√≥mo calificar√≠as tu experiencia? ¬°D√©janos tu opini√≥n sobre el servicio, comida y atenci√≥n!"));
    }

    // ‚úÖ TEST 2: Preguntas con opciones m√∫ltiples (caso real)
    @Test
    void testPreguntasConOpciones() throws Exception {
        EncuestaDTO encuesta = new EncuestaDTO();
        encuesta.setTitulo("Preferencias de caf√©: ¬øCaliente/Fr√≠o? ¬øCon/Sin az√∫car?");
        encuesta.setDescripcion("Selecciona tus preferencias: ‚òï Caliente üßä Fr√≠o üçö Con az√∫car üö´ Sin az√∫car");
        encuesta.setEstado("ACTIVA");

        mockMvc.perform(post("/api/encuestas")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(encuesta)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.titulo").value("Preferencias de caf√©: ¬øCaliente/Fr√≠o? ¬øCon/Sin az√∫car?"))
                .andExpect(jsonPath("$.descripcion").value("Selecciona tus preferencias: ‚òï Caliente üßä Fr√≠o üçö Con az√∫car üö´ Sin az√∫car"));
    }

    // ‚úÖ TEST 3: Encuesta de evaluaci√≥n (caso real)
    @Test
    void testEncuestaEvaluacion() throws Exception {
        EncuestaDTO encuesta = new EncuestaDTO();
        encuesta.setTitulo("Evaluaci√≥n de servicio: Del 1‚≠ê al 5‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê");
        encuesta.setDescripcion("Califica nuestro servicio en: Atenci√≥n üìû, Calidad üçΩÔ∏è, Tiempo ‚è±Ô∏è, Precio üí∞");
        encuesta.setEstado("ACTIVA");

        mockMvc.perform(post("/api/encuestas")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(encuesta)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.titulo").value("Evaluaci√≥n de servicio: Del 1‚≠ê al 5‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"))
                .andExpect(jsonPath("$.descripcion").value("Califica nuestro servicio en: Atenci√≥n üìû, Calidad üçΩÔ∏è, Tiempo ‚è±Ô∏è, Precio üí∞"));
    }

    // ‚úÖ TEST 4: Encuesta con hashtags y menciones (caso moderno)
    @Test
    void testEncuestaConHashtags() throws Exception {
        EncuestaDTO encuesta = new EncuestaDTO();
        encuesta.setTitulo("Encuesta #ExperienciaCliente 2024");
        encuesta.setDescripcion("Participa y gana! @TodosLosClientes #Opini√≥n #Satisfacci√≥n üí¨");
        encuesta.setEstado("ACTIVA");

        mockMvc.perform(post("/api/encuestas")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(encuesta)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.titulo").value("Encuesta #ExperienciaCliente 2024"))
                .andExpect(jsonPath("$.descripcion").value("Participa y gana! @TodosLosClientes #Opini√≥n #Satisfacci√≥n üí¨"));
    }

    // ‚úÖ TEST 5: L√≠mite razonable (texto largo pero dentro de l√≠mites)
    @Test
    void testTextoDentroDeLimites() throws Exception {
        // Texto largo pero razonable para una encuesta
        String titulo = "Encuesta completa sobre experiencia del cliente en todos nuestros servicios y productos ofrecidos durante el a√±o 2024";
        String descripcion = "Esta encuesta busca recopilar tu opini√≥n sobre diversos aspectos de nuestro servicio: calidad, atenci√≥n al cliente, tiempos de entrega, relaci√≥n precio-calidad y satisfacci√≥n general. ¬°Tu feedback es muy importante para nosotros!";

        EncuestaDTO encuesta = new EncuestaDTO();
        encuesta.setTitulo(titulo);
        encuesta.setDescripcion(descripcion);
        encuesta.setEstado("ACTIVA");

        mockMvc.perform(post("/api/encuestas")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(encuesta)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.titulo").value(titulo))
                .andExpect(jsonPath("$.descripcion").value(descripcion));
    }
}